#########################################################Your first database###########################################################

##Query information_schema with SELECT

-- Query the right table in information_schema to get columns
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_name = 'university_professors' AND table_schema = 'public';

-- Query the first five rows of our table
SELECT * 
FROM university_professors 
LIMIT 5;Query information_schema with SELECT


##CREATE your first few TABLEs
-- Create a table for the universities entity type
CREATE TABLE universities (
 university_shortname text,
 university text,
 university_city text
);


-- Print the contents of this table
SELECT * 
FROM universities


##ADD a COLUMN with ALTER TABLE
-- Add the university_shortname column
ALTER TABLE professors
ADD COLUMN university_shortname text;

-- Print the contents of this table
SELECT * 
FROM professors


##RENAME and DROP COLUMNs in affiliations
-- Rename the organisation column
ALTER TABLE affiliations
RENAME COLUMN organisation TO organization;

-- Delete the university_shortname column
ALTER TABLE affiliations
DROP COLUMN university_shortname;


##Migrate data with INSERT INTO SELECT DISTINCT
-- Insert unique professors into the new table
INSERT INTO professors 
SELECT DISTINCT firstname, lastname, university_shortname 
FROM university_professors;

-- Doublecheck the contents of professors
SELECT * 
FROM professors;


-- Insert unique affiliations into the new table
INSERT INTO affiliations 
SELECT DISTINCT firstname, lastname, function, organization 
FROM university_professors;

-- Doublecheck the contents of affiliations
SELECT * 
FROM affiliations;


##Delete tables with DROP TABLE
-- Delete the university_professors table
DROP TABLE university_professors;




############################################################Enforce data consistency with attribute constraints#######################################
##Conforming with data types
-- Let's add a record to the table
INSERT INTO transactions (transaction_date, amount, fee) 
VALUES ('2018-09-24', 5454, '30');

-- Doublecheck the contents
SELECT *
FROM transactions;


##Type CASTs
-- Calculate the net amount as amount + fee
SELECT transaction_date, amount + CAST(fee AS integer)AS net_amount 
FROM transactions;


##Change types with ALTER COLUMN
-- Select the university_shortname column
SELECT DISTINCT(university_shortname) 
FROM professors;


-- Specify the correct fixed-length character type
ALTER TABLE professors
ALTER COLUMN university_shortname
TYPE char(3);


    -- Change the type of firstname
ALTER TABLE professors
ALTER COLUMN firstname
TYPE varchar(64)



##Convert types USING a function
-- Convert the values in firstname to a max. of 16 characters
ALTER TABLE professors 
ALTER COLUMN firstname 
TYPE varchar(16)
USING SUBSTRING(firstname FROM 1 FOR 16)


##Disallow NULL values with SET NOT NULL
-- Disallow NULL values in lastname
ALTER TABLE professors
ALTER COLUMN lastname SET NOT NULL


##Make your columns UNIQUE with ADD CONSTRAINT
-- Make universities.university_shortname unique
ALTER table universities
ADD constraint university_shortname_unq UNIQUE(university_shortname);


-- Make organizations.organization unique
ALTER TABLE organizations
ADD CONSTRAINT organization_unq UNIQUE(organization);



############################################Uniquely identify records with key constraints#######################################################
##Get to know SELECT COUNT DISTINCT
-- Count the number of rows in universities
SELECT COUNT(*) 
FROM universities;


##Get to know SELECT COUNT DISTINCT
-- Count the number of distinct values in the university_city column
SELECT count(distinct(university_city)) 
FROM universities;


##Identify keys with SELECT COUNT DISTINCT
-- Try out different combinations
SELECT COUNT(distinct(firstname,lastname)) 
FROM professors;



##ADD key CONSTRAINTs to the tables
-- Rename the organization column to id
ALTER TABLE organizations
RENAME COLUMN organization TO id;

-- Make id a primary key
ALTER TABLE organizations
ADD CONSTRAINT organization_pk PRIMARY KEY (id);



##ADD key CONSTRAINTs to the tables
-- Rename the university_shortname column to id
alter table universities
rename column university_shortname to id;

-- Make id a primary key
alter table universities 
add constraint university_pk primary key(id);


##Add a SERIAL surrogate key
-- Add the new column to the table
ALTER TABLE professors 
ADD COLUMN id serial;

-- Make id a primary key
ALTER TABLE professors 
ADD CONSTRAINT professors_pkey PRIMARY KEY (id);

-- Have a look at the first 10 rows of professors
select * from professors limit 10;


##CONCATenate columns to a surrogate key
-- Count the number of distinct rows with columns make, model
SELECT COUNT(DISTINCT(make, model)) 
FROM cars;

-- Add the id column
ALTER TABLE cars
ADD COLUMN id varchar(128);

-- Update id with make + model
UPDATE cars
SET id = CONCAT(make, model);

-- Make id a primary key
alter table cars
add constraint id_pk primary key(id);

-- Have a look at the table
SELECT * FROM cars;


##Test your knowledge before advancing
-- Create the table
create table students (
  last_name varchar(128) not null,
  ssn integer primary key,
  phone_no char(12)
);
